package com.example.project3;


import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import org.achartengine.GraphicalView;

import com.parse.FindCallback;
import com.parse.ParseObject;
import com.parse.ParseQuery;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.DatePicker;
import android.widget.DatePicker.OnDateChangedListener;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

public class AgregateGraphingActivity extends Activity {
	String userName = "";
	private static final String TAG = "MenuActivity";
	private DatePicker graphStartDate;
	private DatePicker graphEndDate;
	
	private int startDay;
	private int startMonth;
	private int startYear;
	
	private int endDay;
	private int endMonth;
	private int endYear;
	
	private TextView school;
	final Calendar c = Calendar.getInstance();
	
	ArrayList<Integer> yData = new ArrayList<Integer>();
	ArrayList<String> xData= new ArrayList<String>();
	String[] activities = {"Cooking", "Basketball", "Swimming", "Tennis"};
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.agregategraphing);

	
	school = (TextView) findViewById(R.id.schoolName);
	school.setText("Agregate Data");
	
	xData = new ArrayList<String>();
	yData = new ArrayList<Integer>();
	xData.add("Fake");
	yData.add(120);
	xData.add("Fake");
	yData.add(130);
	xData.add("Fake");
	yData.add(140);

	
	BarGraph bar = new BarGraph();

	bar.setData(yData, xData, "Standard");
	GraphicalView gview = bar.getView(this);
	LinearLayout layout = (LinearLayout) findViewById(R.id.chart);
	layout.addView(gview);
	
	
	graphEndDate = (DatePicker) findViewById(R.id.graphDateEnd);
	
	
	final Calendar c = Calendar.getInstance();
	endYear = c.get(Calendar.YEAR);
	endMonth = c.get(Calendar.MONTH);
	endDay = c.get(Calendar.DAY_OF_MONTH);
	
	graphEndDate.init(endYear, endMonth, endDay, new OnDateChangedListener(){

		@Override
		public void onDateChanged(DatePicker arg0, int arg1, int arg2, int arg3) {
			// TODO Auto-generated method stub
			
		}
		
	});
	
	graphEndDate.setCalendarViewShown(false);
	
	graphStartDate = (DatePicker) findViewById(R.id.graphDateStart);
	
	
	final Calendar c2 = Calendar.getInstance();

	c2.add(c2.DAY_OF_MONTH, -7);

	startYear = c2.get(Calendar.YEAR);
	startMonth = c2.get(Calendar.MONTH);
	startDay = c2.get(Calendar.DAY_OF_MONTH);
	
	graphEndDate.init(startYear, startMonth, startDay, new OnDateChangedListener(){
 
		@Override
		public void onDateChanged(DatePicker arg0, int arg1, int arg2, int arg3) {
			// TODO Auto-generated method stub
			
		}
		
	});
	
	graphStartDate.setCalendarViewShown(false);
	
	}
	
	public void onGraphBtnClick(View arg0){
		final Calendar TempC = c;
		
		yData = new ArrayList<Integer>();
		xData = new ArrayList<String>();

		
		
		for(int i = 0; i <7; i++){
		if(TempC.get(Calendar.DAY_OF_WEEK)==2 || TempC.get(Calendar.DAY_OF_WEEK)==3){}
		else{
			String queryDate = "Absent_"+ TempC.get(Calendar.MONTH)+"_";
			if(TempC.get(Calendar.DAY_OF_MONTH) < 10) {
				queryDate = queryDate + "0";
			}
			queryDate = queryDate + TempC.get(Calendar.DAY_OF_MONTH)+"_"+TempC.get(Calendar.YEAR);
			
			int sum = 0;
			boolean absent = false;
			for (String activity : activities) {
				sum = 0;
				List<String> students = getStudentsInActivity(activity);
			 for (String s : students) {
				 ParseQuery query = new ParseQuery(activity);
					query.whereEqualTo("Name", s);
					List<ParseObject> queryList = new ArrayList<ParseObject>();
					
					try {
						queryList = query.find();
						for(ParseObject student : queryList) {
							if(student.getString(queryDate)!=null && !student.getString(queryDate).equals("--")){
							Log.v("tag", queryDate +"     "+ student.getString(queryDate));

								absent = true;
								
							}
						}
					}
					catch(com.parse.ParseException e) {
						e.printStackTrace();
					}
					if (!absent) {
						sum++;
					}
			}
		}
			
					xData.add(TempC.get(Calendar.MONTH) + "/" + TempC.get(Calendar.DAY_OF_MONTH));
						yData.add(sum);
				}
			 
			
			
		TempC.add(Calendar.DATE, 1);

		
		}
		layout.removeView(gview);
		bar.setData(yData, xData, "Standard");
		
		 gview = bar.getView(context);

		 layout = (LinearLayout) findViewById(R.id.chart);
		 
		layout.addView(gview);
		
		TotalAttendance.setText("Total Possible Attendance: " + xData.size());
		int daysAttended=0;
		for(int i = 0; i<yData.size(); i++){
			daysAttended = daysAttended + yData.get(i);
		}
		ActualAttendance.setText("Total Actual Attendance: " + daysAttended);
		
	}
	
	public List<String> getStudentList() {
		ParseQuery query = new ParseQuery("Student");
		List<ParseObject> queryList = new ArrayList<ParseObject>();
		List<String> students = new ArrayList<String>();
		try {
			queryList = query.find();
			Log.v("students", queryList.size()+"");
			for(ParseObject student : queryList) {

				if(student.getString("Name")!=null){
					students.add(student.getString("Name"));
				}
			}
		}
		catch(com.parse.ParseException e) {
			e.printStackTrace();
		}
		return students;
	}
	
	public List<String> getStudentsInActivity(String activity) {
		ParseQuery query = new ParseQuery(activity);
		List<ParseObject> queryList = new ArrayList<ParseObject>();
		List<String> students = new ArrayList<String>();
		try {
			queryList = query.find();
			for(ParseObject student : queryList) {
				if(student.getString("Name")!=null){
					students.add(student.getString("Name"));
				}
			}
		}
		catch(com.parse.ParseException e) {
			e.printStackTrace();
		}
		return students;
	}

	}
	
	
	

}
